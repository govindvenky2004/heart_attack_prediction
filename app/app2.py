# app2.py
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import joblib
import pandas as pd
import os, uuid, io, requests
from datetime import datetime
import matplotlib.pyplot as plt

# PDF & Visualization
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfgen import canvas
from PyPDF2 import PdfReader, PdfWriter

# Heart Chatbot
from heart_chatbot import HeartChatbot

# ------------------- FastAPI App -------------------
app = FastAPI(
    title="Heart Attack Prediction & Chatbot API",
    description="Predict heart attack risk and provide intelligent heart health advice.",
    version="2.0"
)

# ------------------- CORS -------------------
origins = ["http://localhost:3000"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ------------------- Load Models -------------------
model = joblib.load("../models/random_forest.pkl")
chatbot = HeartChatbot(kb_path="heart_kb.json")
GOOGLE_API_KEY = "AIzaSyCVxOBBL0vwloJcak5OwKawij01uupF_o0"  # Replace with your key

# ------------------- Input Schemas -------------------
class HeartInput(BaseModel):
    Age: int
    Sex: int
    ChestPainType: int
    RestingBP: int
    Cholesterol: int
    FastingBS: int
    RestingECG: int
    MaxHR: int
    ExerciseAngina: int
    Oldpeak: float
    ST_Slope: int

class ChatRequest(BaseModel):
    message: str
    lat: Optional[float] = None
    lng: Optional[float] = None

# ------------------- Decode & Add Units -------------------
def decode_patient_data(data: dict) -> dict:
    sex_map = {0: "Female", 1: "Male"}
    chest_pain_map = {0: "Typical Angina", 1: "Atypical Angina",
                      2: "Non-Anginal", 3: "Asymptomatic"}
    resting_ecg_map = {0: "Normal", 1: "ST-T Abnormality", 2: "LV Hypertrophy"}
    exercise_angina_map = {0: "No", 1: "Yes"}
    st_slope_map = {0: "Downsloping", 1: "Flat", 2: "Upsloping"}
    fasting_bs_map = {0: "Normal (<120 mg/dL)", 1: "High (≥120 mg/dL)"}

    decoded = data.copy()
    decoded["Sex"] = sex_map.get(data["Sex"], data["Sex"])
    decoded["ChestPainType"] = chest_pain_map.get(data["ChestPainType"], data["ChestPainType"])
    decoded["RestingECG"] = resting_ecg_map.get(data["RestingECG"], data["RestingECG"])
    decoded["ExerciseAngina"] = exercise_angina_map.get(data["ExerciseAngina"], data["ExerciseAngina"])
    decoded["ST_Slope"] = st_slope_map.get(data["ST_Slope"], data["ST_Slope"])
    decoded["FastingBS"] = fasting_bs_map.get(data["FastingBS"], data["FastingBS"])

    # Add units
    decoded["RestingBP"] = f"{decoded['RestingBP']} mmHg"
    decoded["Cholesterol"] = f"{decoded['Cholesterol']} mg/dL"
    decoded["MaxHR"] = f"{decoded['MaxHR']} bpm"
    decoded["Oldpeak"] = f"{decoded['Oldpeak']} mm"

    return decoded

# ------------------- PDF Utilities -------------------
def add_watermark(pdf_path: str, watermark_text: str = "CONFIDENTIAL"):
    temp_pdf = f"{uuid.uuid4().hex}_watermark.pdf"
    c = canvas.Canvas(temp_pdf, pagesize=A4)
    c.setFont("Helvetica-Bold", 60)
    c.setFillColorRGB(0.9, 0.9, 0.9, alpha=0.3)
    c.saveState()
    c.translate(300, 400)
    c.rotate(45)
    c.drawCentredString(0, 0, watermark_text)
    c.restoreState()
    c.save()

    reader_orig = PdfReader(pdf_path)
    reader_watermark = PdfReader(temp_pdf)
    writer = PdfWriter()
    for page in reader_orig.pages:
        page.merge_page(reader_watermark.pages[0])
        writer.add_page(page)

    with open(pdf_path, "wb") as f:
        writer.write(f)
    os.remove(temp_pdf)

def create_stylish_pdf(pdf_path: str, patient_data: dict,
                       risk_label: str, probability: float,
                       recommendation: str, logo_path: str = None):
    styles = getSampleStyleSheet()
    story = []

    if logo_path and os.path.exists(logo_path):
        story.append(Image(logo_path, width=80, height=80))

    story.append(Paragraph(
        "<b><font size=18 color='#003366'>Heart Attack Risk Report</font></b>",
        styles["Title"]
    ))
    story.append(Paragraph(
        f"<font size=10 color='#666666'>Generated by HeartCare AI | "
        f"{datetime.now().strftime('%d %b %Y %H:%M')}</font>",
        styles["Normal"]
    ))
    story.append(Spacer(1, 12))

    # Patient Details Table
    table_data = [["Parameter", "Value"]] + [[k, str(v)] for k, v in patient_data.items()]
    table = Table(table_data, colWidths=[180, 180])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#003366")),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.white),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("ROWBACKGROUNDS", (0, 1), (-1, -1), [colors.whitesmoke, colors.lightgrey])
    ]))
    story.append(Paragraph("<b>Patient Details:</b>", styles["Heading2"]))
    story.append(table)
    story.append(Spacer(1, 12))

    # Prediction Summary
    risk_color = "red" if risk_label == "High Risk" else "green"
    story.append(Paragraph(f"<b>Model Prediction:</b> <font color='{risk_color}'>{risk_label}</font>",
                           styles["Heading2"]))
    story.append(Paragraph(f"<b>Risk Probability:</b> {probability*100:.2f}%", styles["Normal"]))
    story.append(Paragraph(f"<b>Recommendation:</b> {recommendation}", styles["Normal"]))
    story.append(Spacer(1, 12))

    # Vitals Dashboard
    vitals = {k: v for k, v in patient_data.items()
              if k in ["RestingBP", "Cholesterol", "MaxHR", "Oldpeak"]}
    vitals_data = [["Vital", "Value"]] + [[k, str(v)] for k, v in vitals.items()]
    vitals_table = Table(vitals_data, colWidths=[180, 180])
    vitals_table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#ff9900")),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.white),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("ROWBACKGROUNDS", (0, 1), (-1, -1), [colors.whitesmoke, colors.lightgrey])
    ]))
    story.append(Paragraph("<b>Vitals Dashboard:</b>", styles["Heading2"]))
    story.append(vitals_table)
    story.append(Spacer(1, 12))

    # Risk Probability Chart
    chart_buffer = io.BytesIO()
    plt.figure(figsize=(4, 2))
    plt.bar(["Risk Probability"], [probability], color=risk_color)
    plt.ylim([0, 1])
    plt.ylabel("Probability")
    plt.title("Heart Attack Risk")
    plt.tight_layout()
    plt.savefig(chart_buffer, format="PNG")
    plt.close()
    chart_buffer.seek(0)
    story.append(Image(chart_buffer, width=250, height=120))
    story.append(Spacer(1, 20))

    story.append(Paragraph("<i>Generated by HeartCare AI</i>", styles["Normal"]))

    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    doc = SimpleDocTemplate(pdf_path, pagesize=A4)
    doc.build(story)
    add_watermark(pdf_path, watermark_text="CONFIDENTIAL")

# ------------------- Prediction Endpoint -------------------
@app.post("/predict-download")
async def predict_heart_disease_download(data: HeartInput):
    try:
        cols = ["Age", "Sex", "ChestPainType", "RestingBP", "Cholesterol",
                "FastingBS", "RestingECG", "MaxHR",
                "ExerciseAngina", "Oldpeak", "ST_Slope"]
        input_df = pd.DataFrame([data.dict()], columns=cols)
        input_array = input_df.values

        prediction = model.predict(input_array)[0]
        probability = model.predict_proba(input_array)[0][1]
        risk_label = "High Risk" if probability >= 0.45 else "Low Risk"
        recommendation = (
            "Consult a doctor immediately!"
            if probability >= 0.45
            else "Maintain a healthy lifestyle."
        )

        decoded_data = decode_patient_data(data.dict())

        pdf_filename = f"heart_report_{uuid.uuid4().hex}.pdf"
        pdf_path = os.path.join("temp_pdfs", pdf_filename)
        logo_path = "../frontend/build/logo.png"

        create_stylish_pdf(pdf_path, decoded_data, risk_label, probability,
                           recommendation, logo_path=logo_path)

        return {
            "prediction": int(prediction),
            "probability": float(probability),
            "download_link": f"/download/{pdf_filename}"
        }
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": str(e)})

# ------------------- PDF Download Endpoint -------------------
@app.get("/download/{filename}", response_class=FileResponse)
def download_pdf(filename: str):
    pdf_path = os.path.join("temp_pdfs", filename)
    if os.path.exists(pdf_path):
        return FileResponse(pdf_path, media_type="application/pdf", filename=filename)
    return JSONResponse(status_code=404, content={"error": "File not found"})

# ------------------- Google Places Helper -------------------
async def fetch_nearby_hospitals(lat: float, lng: float, radius: int = 5000):
    url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
    params = {
        "location": f"{lat},{lng}",
        "radius": radius,
        "type": "hospital",
        "keyword": "heart",
        "key": GOOGLE_API_KEY
    }
    r = requests.get(url, params=params).json()
    return [
        f"• **{h.get('name')}** – {h.get('vicinity')}"
        for h in r.get("results", [])
    ]

# ------------------- Chatbot Endpoint -------------------
@app.post("/chat")
async def chat(req: ChatRequest):
    user_msg = req.message.lower().strip()
    hospital_keywords = ["nearby hospital", "find hospital", "cardiac hospital"]
    if any(k in user_msg for k in hospital_keywords):
        if req.lat is None or req.lng is None:
            return {"reply": "Please enable location to find nearby heart hospitals."}
        hospitals = await fetch_nearby_hospitals(req.lat, req.lng)
        if hospitals:
            return {"reply": "Nearby heart hospitals:\n" + "\n".join(hospitals[:5])}
        else:
            return {"reply": "I couldn’t find heart hospitals near you."}
    return {"reply": chatbot.get_response(req.message)}

# ------------------- Serve React Frontend -------------------
frontend_path = os.path.join(os.path.dirname(__file__), "../frontend/build")
app.mount("/static", StaticFiles(directory=os.path.join(frontend_path, "static")), name="static")

@app.get("/", response_class=FileResponse)
def serve_react():
    return FileResponse(os.path.join(frontend_path, "index.html"))

@app.get("/{full_path:path}", response_class=FileResponse)
def serve_react_catchall(full_path: str):
    return FileResponse(os.path.join(frontend_path, "index.html"))
